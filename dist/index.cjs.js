"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var s=require("web-push");exports.PushNotificationClient=class{constructor(s){this.serverUrl=s.serverUrl,this.publicVapidKey=s.publicVapidKey,this.swPath=s.swPath||"/sw.js",this.userId=s.userId}urlBase64ToUint8Array(s){const t=(s+"=".repeat((4-s.length%4)%4)).replace(/-/g,"+").replace(/_/g,"/"),e=window.atob(t),i=new Uint8Array(e.length);for(let s=0;s<e.length;++s)i[s]=e.charCodeAt(s);return i}async initialize(){"serviceWorker"in navigator&&"PushManager"in window||console.log("Push notifications are not supported");"granted"!==await Notification.requestPermission()&&console.log("Notification permission not granted");try{const s=await navigator.serviceWorker.register(this.swPath);await navigator.serviceWorker.ready;let t=await s.pushManager.getSubscription();if(!t){const e=this.urlBase64ToUint8Array(this.publicVapidKey);t=await s.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:e})}return await this.saveSubscription(t),t}catch(s){console.error(`Service Worker Registration failed: ${s.message}`)}}async saveSubscription(s){return(await fetch(`${this.serverUrl}/save-subscription`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({user:this.userId,key:s})})).json()}async sendNotification(s){try{return(await fetch(`${this.serverUrl}/send-notification`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)})).json()}catch(s){console.log(s)}}},exports.PushNotificationServer=class{constructor(t){this.publicKey=t.publicKey,this.privateKey=t.privateKey,this.email=t.email,this.subscriptions=new Map,s.webPush.setVapidDetails(`mailto:${this.email}`,this.publicKey,this.privateKey)}setupRoutes(s){s.post("/save-subscription",this.saveSubscription.bind(this)),s.post("/send-notification",this.sendNotification.bind(this))}saveSubscription(s,t){const{user:e,key:i}=s.body,r=i?.keys?.auth;this.subscriptions.has(i.endpoint)||this.subscriptions.set(i.endpoint,{userAuth:r,key:i}),t.status(200).json({status:"success",message:"Subscription saved!"})}async sendNotification(t,e){const i=t.body;if(0===this.subscriptions.size)return e.status(400).json({status:"error",message:"No subscriptions found"});try{const t=await Promise.all(Array.from(this.subscriptions.values()).map((t=>s.webPush.sendNotification(t.key,JSON.stringify(i)).then((()=>({success:!0}))).catch((s=>({success:!1,error:s.message})))))),r=t.filter((s=>s.success)).length,a=t.length-r;e.status(200).json({status:"success",message:`Notifications sent! Success: ${r}, Failures: ${a}`})}catch(s){e.status(500).json({status:"error",message:"Internal server error"})}}};
