!function(s,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("web-push")):"function"==typeof define&&define.amd?define(["exports","web-push"],e):e((s="undefined"!=typeof globalThis?globalThis:s||self).PushNotificationService={},s.webPush)}(this,(function(s,e){"use strict";s.PushNotificationClient=class{constructor(s){this.serverUrl=s.serverUrl,this.publicVapidKey=s.publicVapidKey,this.swPath=s.swPath||"/sw.js",this.userId=s.userId}urlBase64ToUint8Array(s){const e=(s+"=".repeat((4-s.length%4)%4)).replace(/-/g,"+").replace(/_/g,"/"),t=window.atob(e),i=new Uint8Array(t.length);for(let s=0;s<t.length;++s)i[s]=t.charCodeAt(s);return i}async initialize(){"serviceWorker"in navigator&&"PushManager"in window||console.log("Push notifications are not supported");"granted"!==await Notification.requestPermission()&&console.log("Notification permission not granted");try{const s=await navigator.serviceWorker.register(this.swPath);await navigator.serviceWorker.ready;let e=await s.pushManager.getSubscription();if(!e){const t=this.urlBase64ToUint8Array(this.publicVapidKey);e=await s.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:t})}return await this.saveSubscription(e),e}catch(s){console.error(`Service Worker Registration failed: ${s.message}`)}}async saveSubscription(s){return(await fetch(`${this.serverUrl}/save-subscription`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({user:this.userId,key:s})})).json()}async sendNotification(s){try{return(await fetch(`${this.serverUrl}/send-notification`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(s)})).json()}catch(s){console.log(s)}}},s.PushNotificationServer=class{constructor(s){this.publicKey=s.publicKey,this.privateKey=s.privateKey,this.email=s.email,this.subscriptions=new Map,e.webPush.setVapidDetails(`mailto:${this.email}`,this.publicKey,this.privateKey)}setupRoutes(s){s.post("/save-subscription",this.saveSubscription.bind(this)),s.post("/send-notification",this.sendNotification.bind(this))}saveSubscription(s,e){const{user:t,key:i}=s.body,r=i?.keys?.auth;this.subscriptions.has(i.endpoint)||this.subscriptions.set(i.endpoint,{userAuth:r,key:i}),e.status(200).json({status:"success",message:"Subscription saved!"})}async sendNotification(s,t){const i=s.body;if(0===this.subscriptions.size)return t.status(400).json({status:"error",message:"No subscriptions found"});try{const s=await Promise.all(Array.from(this.subscriptions.values()).map((s=>e.webPush.sendNotification(s.key,JSON.stringify(i)).then((()=>({success:!0}))).catch((s=>({success:!1,error:s.message})))))),r=s.filter((s=>s.success)).length,o=s.length-r;t.status(200).json({status:"success",message:`Notifications sent! Success: ${r}, Failures: ${o}`})}catch(s){t.status(500).json({status:"error",message:"Internal server error"})}}},Object.defineProperty(s,"__esModule",{value:!0})}));
